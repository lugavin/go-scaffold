// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package env

import (
	"context"
	"github.com/lugavin/go-scaffold/config"
)

// Injectors from env.wire.go:

func initEnvironment(ctx context.Context, cfg *config.Config) (*Environment, error) {
	logger := provideLogger(cfg)
	mysql, err := provideMysql(cfg)
	if err != nil {
		return nil, err
	}
	universalClient := provideRedis(cfg)
	producer := provideKafkaProducer(logger, cfg)
	consumer := provideKafkaConsumer(logger, cfg)
	translationRepo := provideTranslationRepo(mysql)
	translationWebAPI := provideTranslationWebAPI(cfg)
	translationUseCase := provideTranslationUseCase(translationRepo, translationWebAPI)
	authTokenRepo := provideAuthTokenRepo(mysql)
	authTokenUseCase, err := provideAuthTokenUseCase(authTokenRepo, cfg)
	if err != nil {
		return nil, err
	}
	environment := &Environment{
		logger:             logger,
		mysql:              mysql,
		redisCli:           universalClient,
		kafkaProducer:      producer,
		kafkaConsumer:      consumer,
		translationRepo:    translationRepo,
		translationWebAPI:  translationWebAPI,
		translationUseCase: translationUseCase,
		authTokenRepo:      authTokenRepo,
		authTokenUseCase:   authTokenUseCase,
	}
	return environment, nil
}
